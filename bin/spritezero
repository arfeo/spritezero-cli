#!/usr/bin/env node

const spritezero = require('@mapbox/spritezero');
const fs = require('fs');
const queue = require('queue-async');
const multiline = require('multiline');
const path = require('path');
const stringify = require('json-stable-stringify');
const argv = require('minimist')(process.argv.slice(2), { boolean: ['retina', 'unique', 'h', 'help'] });

const filepaths = (dir) => {
    return fs.readdirSync(dir)
        .filter((d) => {
            return !d.match(/^\./);
        })
        .map((d) => {
            return path.join(dir, d);
        });
};

const showHelp = () => {
  console.log(multiline(() => {
      /*
      spritezero

      Generate sprite sheets for maps and the web using SVG files as input

      Usage
       <output> <inputdir>

      Example
      spritezero maki maki/
      */
  }));
};

if (argv.help || argv._.length < 2) {
    showHelp();

    /* istanbul ignores next */
    process.exit(1);
}

let ratio = 1;
let unique = false;

if (argv.retina) {
    ratio = 2;
} else if (argv.ratio) {
    ratio = parseFloat(argv.ratio);
}

if (argv.unique) {
    unique = true;
}

const outfile = argv._[0];
const input = argv._[1];

const loadFile = (file, callback) => {
    fs.readFile(file, (err, res) => {
        return callback(err, {
            svg: res,
            id: path.basename(file).replace('.svg', ''),
        });
    });
};

const sortById = (a, b) => {
    return b.id < a.id;
};

const q = queue(16);

filepaths(input).forEach((file) => {
    q.defer(loadFile, file);
});

q.awaitAll((err, buffers) => {
    if (err) {
        throw err;
    }

    buffers.sort(sortById);

    const saveLayout = (err, formattedLayout) => {
        if (err) {
            throw err;
        }

        fs.writeFile(`${outfile}.json`, stringify(formattedLayout, {space: '  '}), 'utf8', (err) => {
            if (err) {
                throw err;
            }
        });
    };

    const saveImage = (err, layout) => {
        if (err) {
            throw err;
        }

        spritezero.generateImage(layout, (err, image) => {
            if (err) {
                throw err;
            }

            fs.writeFile(`${outfile}.png`, image, (err) => {
                if (err) {
                    throw err;
                }
            });
        });
    };

    const genLayout = unique ? spritezero.generateLayoutUnique : spritezero.generateLayout;

    genLayout({ imgs: buffers, pixelRatio: ratio, format: true }, saveLayout);
    genLayout({ imgs: buffers, pixelRatio: ratio, format: false }, saveImage);
});
